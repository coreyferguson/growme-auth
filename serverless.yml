
service: wayne4m-auth

frameworkVersion: "=1.70.0"

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, env:stage, 'dev'}
  region: us-west-2

plugins:
  - ./serverless-plugins/serverless-oauth-provider.js

custom:
  oauthProvider:
    domain: wayne4m.com
    subDomain: auth
    identityPoolName: ${self:custom.oauthProvider.domain}_auth_${self:provider.stage}
    userPoolName: ${self:service}-${self:provider.stage}
    certificateArn: arn:aws:acm:us-east-1:935522883202:certificate/ecbde0ad-d555-4654-911c-3eba9712a2e6

resources:
  Resources:

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AliasAttributes:
          - email
          - preferred_username
        AutoVerifiedAttributes:
          - email
        DeviceConfiguration:
          ChallengeRequiredOnNewDevice: true
          DeviceOnlyRememberedOnUserPrompt: true
        MfaConfiguration: OFF
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
            TemporaryPasswordValidityDays: 7
        UserPoolName: ${self:custom.oauthProvider.userPoolName}

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        AllowUnauthenticatedIdentities: true
        IdentityPoolName: ${self:custom.oauthProvider.identityPoolName}

    IdentityPoolUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.oauthProvider.identityPoolName}_identity_pool_unauth_role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: unauthenticated
        Policies:
          - PolicyName: ${self:custom.oauthProvider.identityPoolName}_unauth_role_default_policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                  Resource: "*"

    IdentityPoolAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.oauthProvider.identityPoolName}_identity_pool_auth_role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: authenticated
        Policies:
          - PolicyName: ${self:custom.oauthProvider.identityPoolName}_auth_role_default_policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                  Resource: "*"

    IdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
          unauthenticated: !GetAtt IdentityPoolUnauthRole.Arn
          authenticated: !GetAtt IdentityPoolAuthRole.Arn
